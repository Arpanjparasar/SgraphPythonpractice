'''Write a script to enter the name and year of birth . calculate the
age and store in a list'''

foo=[]
Name=input('Enter your name')
Yob=int(input('Enter the year of birth'))
age=2018-Yob
foo=[Name,Yob,age]
print(foo)

############################################################################
a=int(input('Enter the first number'))
b=int(input('Enter the second Number'))
op=input('Enter the operation(+,-,/,*)')

if (op == '+'):
    print('The sum is :',a+b)
elif(op == '-'):
    print('The difference is :',a-b)
else:
    print('Please enter a valid operation')

###########################################################################
foo=[1,2,3,4,'Bangalore','Mumbai',22,33]
fooInt=[]
fooStr=[]

for i in foo:
    if(type(i) == type(1)):
        fooInt.append(i)
    else:
        fooStr.append(i)
print(fooInt)
print(fooStr)

##############################################################
#While loop while(COndition)

a=30
while(a > 20):
    print('Hi')
    a=a-1
    print('A is :',a)
else:
    print('No')

#######################################################
foo=[2,3,4,5]
def sqaure(x):
    return x*x



for i in foo:
    print(sqaure(i))

##############################################
def square(x):
    return x*x

def cube(f,y):
    print('Square is :',f(y))
    print('Cube is ',y*y*y)


cube(square,2)

#############################################
'''use of decorator '''

def para(f):
    print('<p>')
    f()
    print('</p>')
@para
def headline1():
    print('TODAYS HEADLINE')
@para
def headline2():
    print('YESTERDAYS HEADLINE')
@para
def headline3():
    print('MODI HEADLINE')

#################################################
'''program to find out the execution time of a program'''


import time
t1=time.clock()
for i in range(10000):
    pass
t2=time.clock()

print(t2-t1)
#######################################################
'''use of decorator and wrapper function'''


def check(f):
    def validate(a):
        if(a == 0):
            print('Cannot divide by zero')
        else:
            f(a)
    return validate

@check
def divide(x):
    print(1/x)

foo=[1,2,3,4,5,0]

for i in foo:
    divide(i)

	
#########################################################33
foo=[1,2,3,2,2,1,1,3,55,55,77]
fo={}
for i in foo:
    fo[i]=foo.count(i)

print(fo)
#####################################################
import sys
foo=[1,2,0,90,4,5,'pwd']
for i in foo:
    try:
        r=1/i
        print(r)
    except (ZeroDivisionError,TypeError):
        print('ERROR')
    finally:
        print('Hi!')
#######################################################3
foo=[1,2,3,4,90]
l=len(foo)
for i in range(l):
    if (foo[i] == 90):
        foo[i]=100

print(foo.sort())
print(foo)
##################################################3
path=r'C:\Users\Parth\PycharmProjects\classes\city.txt'
#To create a meta data.
#metadata=open(path,'<Mode>')
dataR=open(path,'w')
foo=dataR.readlines()
foo=dataR.readline()
foo=dataR.read()
print(foo)
dataR.close()
#############################################################
path=r'C:\Users\Parth\PycharmProjects\classes\city.txt'
#To create a meta data.
#metadata=open(path,'<Mode>')
dataW=open(path,'w')
#write() always takes a single string as a parameter
dataW.write('Malgudi')
dataW.close()
#####################################################3
class panda:
    def __init__(self,name,location):
        self.name=name
        self.location=location

    def display(self):
        print('Name is :',self.name)
        print('Location is :',self.location)

obj = panda('Breet','China')
obj.display()

##############################################3
class emp:
    def __init__(self,name):
        self.name=name
        self.email=self.name+'@email.com'

    def display(self):
        print('Name is :',self.name)
        print('Email is :',self.email)


name=input('Enter the name')
obj = emp(name)
obj.display()
obj.display()
#############################ENCAPTULATION#################
class panda:
    def __init__(self,name):
        self.__name=name

    def display(self):
        print('Name is :',self.__name)

obj = panda('Alex')
obj.__name='Lexi'
obj.display()
#####################################POLYMORPHISM#################
class panda:
    def move(self):
        print('Pandas are really slow')

class human:
    def move(self):
        print('Humans can walk and run')

def callMove(obj):
    obj.move()

pa = panda()
hu = human()
callMove(hu)
###############################################3
class grandPapa:
    def __init__(self,name):
        self.name=name

class papa(grandPapa):
    def display(self):
        print('Name is :',self.name)

obj =papa('Panda')
obj.display()
#######################################SUPER FUCNTION################
class emp:
    def __init__(self,name):
        self.name=name
        self.email=self.name+'@email.com'

class developer(emp):
    def __init__(self,name,language):
        super().__init__(name)
        self.language=language

    def display(self):
        print('Name :',self.name)
        print('Email :',self.email)
        print('Language:',self.language)

obj = developer('Alex','Java')
obj.display()

##############################################
import time
import threading
def square(x):
    print('SQUARE PRINTING----')
    for i in x:
        time.sleep(0.2)
        print('square:',i*i)

def cube(x):
    print('CUBE PRINTING----')
    for i in x:
        time.sleep(0.2)
        print('cube:',i*i*i)

t=time.time()
foo=[2,3,4,44,66,5]
t1=threading.Thread(target=square,args=(foo,))
t2=threading.Thread(target=cube,args=(foo,))

t1.start()
t2.start()
t1.join()
t2.join()
print('DONE IN',time.time()-t)
